import { supabase } from "@/lib/supabase"
import { supabase as supabaseAuth } from "@/lib/supabase-auth"
import bcrypt from "bcryptjs"

export interface UsuarioAdmin {
  id: string
  nome: string
  email: string
  senha_hash?: string // agora opcional
  ativo: boolean
  perfil: string
  permissoes: any
  ultimo_login?: string
  created_at: string
  updated_at: string
  auth_user_id?: string // novo campo para vincular com Supabase Auth
}

export interface CriarUsuarioData {
  nome: string
  email: string
  senha: string
  perfil?: string
  permissoes?: any
}

export interface LoginData {
  email: string
  senha: string
}

/**
 * Servi√ßo para gerenciar usu√°rios administrativos (Integrado com Supabase Auth)
 */
export class UsuariosAdminService {
  /**
   * Criar um novo usu√°rio admin (Integrado)
   */
  static async criarUsuario(
    dados: CriarUsuarioData,
  ): Promise<{ success: boolean; message: string; usuario?: UsuarioAdmin }> {
    try {
      console.log("üîê Criando novo usu√°rio admin integrado:", dados.email)

      // 1. Verificar se o email j√° existe na tabela usuarios_admin
      const { data: usuarioExistente, error: errorVerificacao } = await supabase
        .from("usuarios_admin")
        .select("email")
        .eq("email", dados.email.toLowerCase())
        .single()

      if (usuarioExistente) {
        return {
          success: false,
          message: "Email j√° est√° em uso na tabela de permiss√µes",
        }
      }

      // 2. Criar usu√°rio no Supabase Auth (usando signUp em vez de admin)
      console.log("üìã Criando usu√°rio no Supabase Auth...")
      const { data: authData, error: authError } = await supabaseAuth.auth.signUp({
        email: dados.email.toLowerCase(),
        password: dados.senha,
        options: {
          data: {
            role: "admin",
            nome: dados.nome,
            perfil: dados.perfil || "assistente",
          }
        }
      })

      if (authError) {
        console.error("‚ùå Erro ao criar usu√°rio no Auth:", authError)
        return {
          success: false,
          message: "Erro ao criar usu√°rio no sistema de autentica√ß√£o: " + authError.message,
        }
      }

      if (!authData.user) {
        return {
          success: false,
          message: "Erro: Usu√°rio n√£o foi criado no Auth",
        }
      }

      // 3. Criar registro na tabela usuarios_admin
      console.log("üìã Criando registro na tabela de permiss√µes...")
      const { data: novoUsuario, error } = await supabase
        .from("usuarios_admin")
        .insert([
          {
            id: authData.user.id, // Usar o mesmo ID do Auth
            nome: dados.nome,
            email: dados.email.toLowerCase(),
            ativo: true,
            perfil: dados.perfil || "assistente",
            permissoes: dados.permissoes || {},
            auth_user_id: authData.user.id, // Vincular com Auth
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          },
        ])
        .select()
        .single()

      if (error) {
        console.error("‚ùå Erro ao criar usu√°rio na tabela:", error)
        // N√£o podemos deletar do Auth sem permiss√µes admin, mas podemos marcar como inativo
        return {
          success: false,
          message: "Erro ao criar usu√°rio na tabela de permiss√µes: " + error.message,
        }
      }

      console.log("‚úÖ Usu√°rio criado com sucesso (Auth + Permiss√µes):", novoUsuario.email)
      return {
        success: true,
        message: "Usu√°rio criado com sucesso no sistema integrado. Verifique seu email para confirmar a conta.",
        usuario: novoUsuario,
      }
    } catch (error: any) {
      console.error("‚ùå Erro inesperado ao criar usu√°rio:", error)
      return {
        success: false,
        message: "Erro inesperado: " + error.message,
      }
    }
  }

  /**
   * Fazer login de usu√°rio admin (Agora usa Supabase Auth)
   */
  static async login(dados: LoginData): Promise<{ success: boolean; message: string; usuario?: UsuarioAdmin }> {
    try {
      console.log("üîê Tentativa de login integrado:", dados.email)

      // 1. Fazer login no Supabase Auth
      const { data: authData, error: authError } = await supabaseAuth.auth.signInWithPassword({
        email: dados.email.toLowerCase(),
        password: dados.senha,
      })

      if (authError) {
        console.log("‚ùå Erro no login do Auth:", authError.message)
        return {
          success: false,
          message: "Email ou senha incorretos",
        }
      }

      // 2. Buscar dados do usu√°rio na tabela usuarios_admin
      const { data: usuario, error: userError } = await supabase
        .from("usuarios_admin")
        .select("*")
        .eq("email", dados.email.toLowerCase())
        .eq("ativo", true)
        .single()

      if (userError || !usuario) {
        console.log("‚ùå Usu√°rio n√£o encontrado na tabela de permiss√µes")
        // Fazer logout do Auth se n√£o encontrar na tabela
        await supabaseAuth.auth.signOut()
        return {
          success: false,
          message: "Usu√°rio n√£o tem permiss√µes configuradas",
        }
      }

      // 3. Atualizar √∫ltimo login
      await supabase
        .from("usuarios_admin")
        .update({
          ultimo_login: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        })
        .eq("id", usuario.id)

      console.log("‚úÖ Login realizado com sucesso:", usuario.email)
      return {
        success: true,
        message: "Login realizado com sucesso",
        usuario: {
          ...usuario,
          senha_hash: undefined, // N√£o retornar o hash da senha
        },
      }
    } catch (error: any) {
      console.error("‚ùå Erro inesperado no login:", error)
      return {
        success: false,
        message: "Erro inesperado: " + error.message,
      }
    }
  }

  /**
   * Listar todos os usu√°rios admin (Integrado)
   */
  static async listarUsuarios(): Promise<{ success: boolean; usuarios: UsuarioAdmin[]; message?: string }> {
    try {
      console.log("üìã Listando usu√°rios admin integrados...")

      const { data: usuarios, error } = await supabase
        .from("usuarios_admin")
        .select("id, nome, email, ativo, ultimo_login, created_at, updated_at, perfil, permissoes, auth_user_id")
        .order("created_at", { ascending: false })

      if (error) {
        console.error("‚ùå Erro ao listar usu√°rios:", error)
        return {
          success: false,
          usuarios: [],
          message: "Erro ao listar usu√°rios: " + error.message,
        }
      }

      console.log(`‚úÖ ${usuarios?.length || 0} usu√°rios encontrados`)
      return {
        success: true,
        usuarios: (usuarios || []).map(u => ({
          ...u,
          perfil: u.perfil || "assistente",
          permissoes: u.permissoes || {},
        })),
      }
    } catch (error: any) {
      console.error("‚ùå Erro inesperado ao listar usu√°rios:", error)
      return {
        success: false,
        usuarios: [],
        message: "Erro inesperado: " + error.message,
      }
    }
  }

  /**
   * Alterar status do usu√°rio (Integrado)
   */
  static async alterarStatusUsuario(id: string, ativo: boolean): Promise<{ success: boolean; message: string }> {
    try {
      console.log(`üîÑ Alterando status do usu√°rio ${id} para: ${ativo ? "ativo" : "inativo"}`)

      const { error } = await supabase
        .from("usuarios_admin")
        .update({
          ativo,
          updated_at: new Date().toISOString(),
        })
        .eq("id", id)

      if (error) {
        console.error("‚ùå Erro ao alterar status:", error)
        return {
          success: false,
          message: "Erro ao alterar status: " + error.message,
        }
      }

      console.log("‚úÖ Status alterado com sucesso")
      return {
        success: true,
        message: `Usu√°rio ${ativo ? "ativado" : "desativado"} com sucesso`,
      }
    } catch (error: any) {
      console.error("‚ùå Erro inesperado ao alterar status:", error)
      return {
        success: false,
        message: "Erro inesperado: " + error.message,
      }
    }
  }

  /**
   * Alterar senha do usu√°rio (Integrado)
   */
  static async alterarSenha(id: string, novaSenha: string): Promise<{ success: boolean; message: string }> {
    try {
      console.log(`üîê Alterando senha do usu√°rio ${id}`)

      // Buscar auth_user_id
      const { data: usuario, error: userError } = await supabase
        .from("usuarios_admin")
        .select("auth_user_id")
        .eq("id", id)
        .single()

      if (userError || !usuario?.auth_user_id) {
        return {
          success: false,
          message: "Usu√°rio n√£o encontrado ou n√£o vinculado ao Auth",
        }
      }

      // Alterar senha no Supabase Auth (usando updateUser)
      const { error: authError } = await supabaseAuth.auth.updateUser({
        password: novaSenha
      })

      if (authError) {
        return {
          success: false,
          message: "Erro ao alterar senha: " + authError.message,
        }
      }

      console.log("‚úÖ Senha alterada com sucesso")
      return {
        success: true,
        message: "Senha alterada com sucesso",
      }
    } catch (error: any) {
      console.error("‚ùå Erro inesperado ao alterar senha:", error)
      return {
        success: false,
        message: "Erro inesperado: " + error.message,
      }
    }
  }

  /**
   * Excluir usu√°rio (Integrado)
   */
  static async excluirUsuario(id: string): Promise<{ success: boolean; message: string }> {
    try {
      console.log(`üóëÔ∏è Excluindo usu√°rio ${id}`)

      // Buscar usu√°rio na tabela
      const { data: usuario, error: userError } = await supabase
        .from("usuarios_admin")
        .select("id")
        .eq("id", id)
        .single()

      if (userError || !usuario) {
        return {
          success: false,
          message: "Usu√°rio n√£o encontrado",
        }
      }

      // Excluir da tabela usuarios_admin
      const { error: dbError } = await supabase
        .from("usuarios_admin")
        .delete()
        .eq("id", id)

      if (dbError) {
        return {
          success: false,
          message: "Erro ao excluir usu√°rio da tabela: " + dbError.message,
        }
      }

      // N√£o podemos excluir do Auth sem permiss√µes admin, mas podemos marcar como inativo
      console.log("‚ö†Ô∏è Usu√°rio removido da tabela. Para remover do Auth, use o Dashboard do Supabase.")
      
      console.log("‚úÖ Usu√°rio exclu√≠do com sucesso")
      return {
        success: true,
        message: "Usu√°rio exclu√≠do da tabela de permiss√µes. Para remover do Auth, use o Dashboard do Supabase.",
      }
    } catch (error: any) {
      console.error("‚ùå Erro inesperado ao excluir usu√°rio:", error)
      return {
        success: false,
        message: "Erro inesperado: " + error.message,
      }
    }
  }

  /**
   * Vincular usu√°rio existente do Supabase Auth
   */
  static async vincularUsuarioExistente(
    email: string,
    dados: {
      nome: string
      perfil?: string
      permissoes?: any
    }
  ): Promise<{ success: boolean; message: string }> {
    try {
      console.log(`üîó Vincular usu√°rio existente: ${email}`)

      // Verificar se j√° existe na tabela
      const { data: usuarioExistente, error: checkError } = await supabase
        .from("usuarios_admin")
        .select("id")
        .eq("email", email.toLowerCase())
        .single()

      if (usuarioExistente) {
        return {
          success: false,
          message: "Usu√°rio j√° existe na tabela de permiss√µes",
        }
      }

      // Criar registro na tabela usuarios_admin (sem auth_user_id por enquanto)
      const { error: dbError } = await supabase
        .from("usuarios_admin")
        .insert({
          id: crypto.randomUUID(), // Gerar ID √∫nico
          nome: dados.nome,
          email: email.toLowerCase(),
          perfil: dados.perfil || "assistente",
          permissoes: dados.permissoes || {},
          ativo: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        })

      if (dbError) {
        return {
          success: false,
          message: "Erro ao vincular usu√°rio: " + dbError.message,
        }
      }

      return {
        success: true,
        message: "Usu√°rio vinculado com sucesso. Para vincular com Auth, use o Dashboard do Supabase.",
      }
    } catch (error: any) {
      return {
        success: false,
        message: "Erro inesperado: " + error.message,
      }
    }
  }

  /**
   * Buscar usu√°rio por ID
   */
  static async buscarUsuarioPorId(id: string): Promise<{ success: boolean; usuario?: UsuarioAdmin; message?: string }> {
    try {
      console.log("üîç Buscando usu√°rio por ID:", id)

      const { data: usuario, error } = await supabase
        .from("usuarios_admin")
        .select("id, nome, email, ativo, ultimo_login, created_at, updated_at, perfil, permissoes, auth_user_id")
        .eq("id", id)
        .single()

      if (error || !usuario) {
        console.log("‚ùå Usu√°rio n√£o encontrado")
        return {
          success: false,
          message: "Usu√°rio n√£o encontrado",
        }
      }

      console.log("‚úÖ Usu√°rio encontrado:", usuario.email)
      return {
        success: true,
        usuario: {
          ...usuario,
          perfil: usuario.perfil || "assistente",
          permissoes: usuario.permissoes || {},
        },
      }
    } catch (error: any) {
      console.error("‚ùå Erro inesperado ao buscar usu√°rio:", error)
      return {
        success: false,
        message: "Erro inesperado: " + error.message,
      }
    }
  }

  /**
   * Verificar se existe pelo menos um usu√°rio admin
   */
  static async verificarUsuariosExistentes(): Promise<{ success: boolean; existem: boolean; total: number }> {
    try {
      console.log("üîç Verificando usu√°rios existentes...")

      const { data: usuarios, error } = await supabase.from("usuarios_admin").select("id", { count: "exact" })

      if (error) {
        console.error("‚ùå Erro ao verificar usu√°rios:", error)
        return {
          success: false,
          existem: false,
          total: 0,
        }
      }

      const total = usuarios?.length || 0
      console.log(`‚úÖ ${total} usu√°rios encontrados`)

      return {
        success: true,
        existem: total > 0,
        total,
      }
    } catch (error: any) {
      console.error("‚ùå Erro inesperado ao verificar usu√°rios:", error)
      return {
        success: false,
        existem: false,
        total: 0,
      }
    }
  }

  /**
   * Criar usu√°rio admin padr√£o (para setup inicial)
   */
  static async criarUsuarioPadrao(): Promise<{ success: boolean; message: string; usuario?: UsuarioAdmin }> {
    try {
      console.log("üîß Criando usu√°rio admin padr√£o...")

      const dadosPadrao: CriarUsuarioData = {
        nome: "Administrador",
        email: "admin@contratandoplanos.com",
        senha: "admin123456",
      }

      const resultado = await this.criarUsuario(dadosPadrao)

      if (resultado.success) {
        console.log("‚úÖ Usu√°rio admin padr√£o criado com sucesso")
        console.log("üìß Email:", dadosPadrao.email)
        console.log("üîê Senha:", dadosPadrao.senha)
        console.log("‚ö†Ô∏è IMPORTANTE: Altere a senha ap√≥s o primeiro login!")
      }

      return resultado
    } catch (error: any) {
      console.error("‚ùå Erro ao criar usu√°rio padr√£o:", error)
      return {
        success: false,
        message: "Erro ao criar usu√°rio padr√£o: " + error.message,
      }
    }
  }

  /**
   * Validar token de sess√£o (simulado - em produ√ß√£o usar JWT)
   */
  static async validarSessao(token: string): Promise<{ success: boolean; usuario?: UsuarioAdmin }> {
    try {
      // Em produ√ß√£o, implementar valida√ß√£o JWT real
      // Por enquanto, usar uma valida√ß√£o simples baseada no email
      const email = Buffer.from(token, "base64").toString("utf-8")

      const { data: usuario, error } = await supabase
        .from("usuarios_admin")
        .select("id, nome, email, ativo, ultimo_login, created_at, updated_at, perfil, permissoes, auth_user_id")
        .eq("email", email)
        .eq("ativo", true)
        .single()

      if (error || !usuario) {
        return { success: false }
      }

      return {
        success: true,
        usuario: {
          ...usuario,
          perfil: usuario.perfil || "assistente",
          permissoes: usuario.permissoes || {},
        },
      }
    } catch (error: any) {
      console.error("‚ùå Erro ao validar sess√£o:", error)
      return { success: false }
    }
  }

  /**
   * Gerar token de sess√£o (simulado - em produ√ß√£o usar JWT)
   */
  static gerarToken(email: string): string {
    // Em produ√ß√£o, usar JWT com expira√ß√£o e assinatura
    return Buffer.from(email).toString("base64")
  }

  /**
   * Atualizar dados do usu√°rio admin (nome, perfil, permissoes)
   */
  static async atualizarUsuario(id: string, dados: Partial<UsuarioAdmin>): Promise<{ error?: any }> {
    try {
      const { error } = await supabase
        .from("usuarios_admin")
        .update({
          ...dados,
          updated_at: new Date().toISOString(),
        })
        .eq("id", id)
      return { error }
    } catch (error: any) {
      return { error }
    }
  }
}

// Exportar inst√¢ncia padr√£o
export const usuariosAdminService = UsuariosAdminService

export async function buscarUsuariosAdmin() {
  const res = await UsuariosAdminService.listarUsuarios()
  if (!res.success) throw new Error(res.message || "Erro ao buscar usu√°rios")
  return res.usuarios
}

export async function inicializarSistemaUsuarios() {
  // Verifica se existe usu√°rio master, e cria se n√£o existir
  const res = await UsuariosAdminService.verificarUsuariosExistentes()
  if (!res.success) throw new Error("Erro ao verificar usu√°rios")
  if (!res.existem) {
    const criado = await UsuariosAdminService.criarUsuarioPadrao()
    if (!criado.success) throw new Error(criado.message || "Erro ao criar usu√°rio padr√£o")
  }
  return true
}

export async function criarUsuarioAdmin(dados: CriarUsuarioData) {
  return UsuariosAdminService.criarUsuario(dados)
}

export async function atualizarUsuarioAdmin(id: string, dados: Partial<UsuarioAdmin>) {
  // Atualiza apenas os campos enviados
  const { error } = await supabase
    .from("usuarios_admin")
    .update({
      nome: dados.nome,
      email: dados.email?.toLowerCase(),
      perfil: dados.perfil,
      permissoes: dados.permissoes,
      ativo: dados.ativo,
      updated_at: new Date().toISOString(),
    })
    .eq("id", id)

  if (error) throw new Error(error.message)
  return true
}

export async function excluirUsuarioAdmin() {
  throw new Error("Fun√ß√£o de exclus√£o de usu√°rio n√£o implementada")
}

export async function alterarStatusUsuarioAdmin(id: string, ativo: boolean) {
  return UsuariosAdminService.alterarStatusUsuario(id, ativo)
}

export async function buscarPermissoesPerfil() {
  throw new Error("Fun√ß√£o de buscar permiss√µes n√£o implementada")
}

export async function validarSenhaUsuarioAdmin(email: string, senha: string): Promise<UsuarioAdmin | null> {
  try {
    console.log("üîê Validando senha do usu√°rio admin:", email)

    // Buscar usu√°rio pelo email
    const { data: usuario, error } = await supabase
      .from("usuarios_admin")
      .select("*")
      .eq("email", email.toLowerCase())
      .eq("ativo", true)
      .single()

    if (error || !usuario) {
      console.log("‚ùå Usu√°rio n√£o encontrado ou inativo")
      return null
    }

    // Verificar senha
    const senhaValida = await bcrypt.compare(senha, usuario.senha_hash)

    if (!senhaValida) {
      console.log("‚ùå Senha incorreta")
      return null
    }

    // Atualizar √∫ltimo login
    await supabase
      .from("usuarios_admin")
      .update({
        ultimo_login: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .eq("id", usuario.id)

    console.log("‚úÖ Login realizado com sucesso:", usuario.email)
    return {
      ...usuario,
      senha_hash: undefined, // N√£o retornar o hash da senha
      perfil: usuario.perfil || "assistente",
      permissoes: usuario.permissoes || {},
    }
  } catch (error: any) {
    console.error("‚ùå Erro inesperado na valida√ß√£o:", error)
    return null
  }
}
