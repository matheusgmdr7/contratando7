import { supabase } from "@/lib/supabase"

// Modificar a fun√ß√£o buscarProdutosCorretoresAtivos para usar a consulta mais simples e direta
export async function obterProdutosCorretores() {
  try {
    // Simplificar a consulta para garantir que estamos obtendo os produtos
    const { data, error } = await supabase.from("produtos_corretores").select("*").order("nome", { ascending: true })

    if (error) {
      console.error("Erro ao buscar produtos corretores:", error)
      throw error
    }

    console.log("Produtos encontrados:", data)

    // Retornar todos os produtos, independente do status
    return data || []
  } catch (error) {
    console.error("Erro ao buscar produtos corretores:", error)
    throw error
  }
}

export async function obterValorProdutoPorIdade(produtoId: string, idade: number) {
  try {
    console.log(`üîç Buscando valor para produto ${produtoId}, idade ${idade}`)
    
    // Primeiro, buscar as tabelas associadas ao produto
    const { data: relacoes, error: relacoesError } = await supabase
      .from("produto_tabela_relacao")
      .select("tabela_id, segmentacao, descricao")
      .eq("produto_id", produtoId)

    if (relacoesError) {
      console.error(`‚ùå Erro ao buscar rela√ß√µes para o produto ${produtoId}:`, relacoesError)
      throw relacoesError
    }

    if (!relacoes || relacoes.length === 0) {
      console.warn(`‚ö†Ô∏è Nenhuma tabela encontrada para o produto ${produtoId}`)
      return 0
    }

    console.log(`üìä Encontradas ${relacoes.length} tabelas para o produto:`, relacoes)

    // Usar a primeira tabela encontrada (poderia ser melhorado para selecionar a tabela mais adequada)
    const tabelaId = relacoes[0].tabela_id
    console.log(`üìã Usando tabela ID: ${tabelaId}`)

    // Buscar as faixas et√°rias da tabela
    const { data: faixas, error: faixasError } = await supabase
      .from("tabelas_precos_faixas")
      .select("faixa_etaria, valor")
      .eq("tabela_id", tabelaId)
      .order("faixa_etaria", { ascending: true })

    if (faixasError) {
      console.error(`‚ùå Erro ao buscar faixas et√°rias para a tabela ${tabelaId}:`, faixasError)
      throw faixasError
    }

    if (!faixas || faixas.length === 0) {
      console.warn(`‚ö†Ô∏è Nenhuma faixa et√°ria encontrada para a tabela ${tabelaId}`)
      return 0
    }

    console.log(`üéØ Faixas et√°rias encontradas:`, faixas)

    // Encontrar a faixa et√°ria correspondente
    let valorEncontrado = 0
    let faixaEncontrada = null

    for (const faixa of faixas) {
      console.log(`üîç Verificando faixa: ${faixa.faixa_etaria} (valor: ${faixa.valor})`)
      
      // Verificar se √© uma faixa com formato "min-max"
      if (faixa.faixa_etaria.includes("-")) {
        const [minStr, maxStr] = faixa.faixa_etaria.split("-")
        const min = parseInt(minStr.trim(), 10)
        const max = parseInt(maxStr.trim(), 10)

        console.log(`   üìä Faixa ${min}-${max}, idade ${idade}`)
        
        if (!isNaN(min) && !isNaN(max) && idade >= min && idade <= max) {
          valorEncontrado = parseFloat(faixa.valor) || 0
          faixaEncontrada = faixa.faixa_etaria
          console.log(`‚úÖ Faixa encontrada: ${faixaEncontrada}, valor: ${valorEncontrado}`)
          break
        }
      }
      // Verificar se √© uma faixa com formato "min+" (idade m√≠nima)
      else if (faixa.faixa_etaria.endsWith("+")) {
        const minStr = faixa.faixa_etaria.replace("+", "").trim()
        const min = parseInt(minStr, 10)
        
        console.log(`   üìä Faixa ${min}+, idade ${idade}`)
        
        if (!isNaN(min) && idade >= min) {
          valorEncontrado = parseFloat(faixa.valor) || 0
          faixaEncontrada = faixa.faixa_etaria
          console.log(`‚úÖ Faixa encontrada: ${faixaEncontrada}, valor: ${valorEncontrado}`)
          break
        }
      }
      // Verificar se √© uma idade espec√≠fica
      else {
        const idadeExata = parseInt(faixa.faixa_etaria.trim(), 10)
        
        console.log(`   üìä Idade exata ${idadeExata}, idade ${idade}`)
        
        if (!isNaN(idadeExata) && idade === idadeExata) {
          valorEncontrado = parseFloat(faixa.valor) || 0
          faixaEncontrada = faixa.faixa_etaria
          console.log(`‚úÖ Idade exata encontrada: ${faixaEncontrada}, valor: ${valorEncontrado}`)
          break
        }
      }
    }

    if (valorEncontrado > 0) {
      console.log(`üéâ Valor calculado com sucesso: R$ ${valorEncontrado} para faixa ${faixaEncontrada}`)
    } else {
      console.warn(`‚ö†Ô∏è Nenhum valor encontrado para idade ${idade}`)
    }

    return valorEncontrado
  } catch (error) {
    console.error("‚ùå Erro ao obter valor do produto por idade:", error)
    return 0 // Retorna 0 em caso de erro ao inv√©s de throw
  }
}

export async function obterProdutoCorretor(produtoId: string) {
  try {
    const { data, error } = await supabase.from("produtos_corretores").select("*").eq("id", produtoId).single()

    if (error) {
      console.error("Erro ao buscar produto corretor:", error)
      throw error
    }

    return data
  } catch (error) {
    console.error("Erro ao obter produto corretor:", error)
    throw error
  }
}

// Adicionar as fun√ß√µes que est√£o faltando
export async function criarProdutoCorretor(produto: any) {
  try {
    const { data, error } = await supabase.from("produtos_corretores").insert([produto]).select().single()

    if (error) {
      console.error("Erro ao criar produto corretor:", error)
      throw error
    }

    return data
  } catch (error) {
    console.error("Erro ao criar produto corretor:", error)
    throw error
  }
}

export async function atualizarStatusProdutoCorretor(id: string | number, disponivel: boolean) {
  try {
    const { data, error } = await supabase
      .from("produtos_corretores")
      .update({ disponivel })
      .eq("id", id)
      .select()
      .single()

    if (error) {
      console.error("Erro ao atualizar status do produto corretor:", error)
      throw error
    }

    return data
  } catch (error) {
    console.error("Erro ao atualizar status do produto corretor:", error)
    throw error
  }
}

export async function excluirProdutoCorretor(id: string | number) {
  try {
    const { error } = await supabase.from("produtos_corretores").delete().eq("id", id)

    if (error) {
      console.error("Erro ao excluir produto corretor:", error)
      throw error
    }

    return true
  } catch (error) {
    console.error("Erro ao excluir produto corretor:", error)
    throw error
  }
}

export async function atualizarProdutoCorretor(id: string | number, produto: any) {
  try {
    const { data, error } = await supabase.from("produtos_corretores").update(produto).eq("id", id).select().single()

    if (error) {
      console.error("Erro ao atualizar produto corretor:", error)
      throw error
    }

    return data
  } catch (error) {
    console.error("Erro ao atualizar produto corretor:", error)
    throw error
  }
}

/**
 * Busca produtos dos corretores por faixa et√°ria para uso na cota√ß√£o
 * Esta fun√ß√£o usa o mesmo sistema de produtos e tabelas que os corretores
 * Mostra todos os produtos dispon√≠veis, organizados por operadora
 */
export async function buscarProdutosPorFaixaEtaria(faixaEtaria: string) {
  try {
    console.log(`üîç Buscando produtos para faixa et√°ria: ${faixaEtaria}`)
    
    // Buscar produtos dispon√≠veis
    const { data: produtos, error: produtosError } = await supabase
      .from("produtos_corretores")
      .select("*")
      .eq("disponivel", true)
      .order("operadora", { ascending: true })
      .order("nome", { ascending: true })

    if (produtosError) {
      console.error("‚ùå Erro ao buscar produtos:", produtosError)
      throw produtosError
    }

    if (!produtos || produtos.length === 0) {
      console.log("‚ö†Ô∏è Nenhum produto dispon√≠vel encontrado")
      return []
    }

    console.log(`üì¶ Encontrados ${produtos.length} produtos dispon√≠veis`)

    // Para cada produto, buscar o valor para a faixa et√°ria
    const produtosComPrecos = await Promise.all(
      produtos.map(async (produto) => {
        try {
          // Buscar tabelas vinculadas ao produto
          const { data: relacoes, error: relacoesError } = await supabase
            .from("produto_tabela_relacao")
            .select("tabela_id")
            .eq("produto_id", produto.id)

          console.log(`üîç Produto ${produto.nome} (ID: ${produto.id}) - Rela√ß√µes encontradas:`, relacoes)

          if (relacoesError || !relacoes || relacoes.length === 0) {
            console.log(`‚ö†Ô∏è Produto ${produto.nome} sem tabelas vinculadas`)
            // Retornar produto sem pre√ßo
            return {
              id: produto.id,
              nome: produto.nome,
              operadora: produto.operadora || "N√£o especificada",
              cobertura: produto.tipo || "Plano de Sa√∫de",
              tipo: produto.tipo || "Individual",
              descricao: produto.descricao || "Plano de sa√∫de com cobertura completa",
              preco: 0,
              precos: [],
              semPreco: true,
              mensagem: "Pre√ßo sob consulta"
            }
          }

          // Usar a primeira tabela (poderia ser melhorado para selecionar a mais adequada)
          const tabelaId = relacoes[0].tabela_id
          console.log(`üìã Produto ${produto.nome} - Usando tabela ID: ${tabelaId}`)

          // Extrair a idade m√©dia da faixa et√°ria para usar na fun√ß√£o obterValorPorIdade
          let idadeMedia = 30 // padr√£o
          if (faixaEtaria.includes("-")) {
            const [min, max] = faixaEtaria.split("-").map(Number)
            idadeMedia = Math.floor((min + max) / 2)
          } else if (faixaEtaria.endsWith("+")) {
            idadeMedia = parseInt(faixaEtaria.replace("+", "")) + 5
          } else {
            idadeMedia = parseInt(faixaEtaria)
          }

          console.log(`üîç Produto ${produto.nome} - Idade m√©dia calculada: ${idadeMedia} para faixa ${faixaEtaria}`)

          // Usar a fun√ß√£o obterValorPorIdade que j√° funciona
          const valor = await obterValorProdutoPorIdade(produto.id.toString(), idadeMedia)
          console.log(`üí∞ Produto ${produto.nome} - Valor encontrado: ${valor}`)

          if (valor > 0) {
            // Produto com pre√ßo encontrado
            return {
              id: produto.id,
              nome: produto.nome,
              operadora: produto.operadora || "N√£o especificada",
              cobertura: produto.tipo || "Plano de Sa√∫de",
              tipo: produto.tipo || "Individual",
              descricao: produto.descricao || "Plano de sa√∫de com cobertura completa",
              preco: valor,
              precos: [{
                faixa_etaria: faixaEtaria,
                preco: valor
              }],
              semPreco: false,
              mensagem: null
            }
          } else {
            console.log(`‚ö†Ô∏è Produto ${produto.nome} sem pre√ßo para faixa ${faixaEtaria}`)
            
            // Vamos verificar todas as faixas dispon√≠veis nesta tabela
            const { data: todasFaixas, error: todasFaixasError } = await supabase
              .from("tabelas_precos_faixas")
              .select("faixa_etaria, valor")
              .eq("tabela_id", tabelaId)
            
            console.log(`üîç Produto ${produto.nome} - Todas as faixas dispon√≠veis na tabela ${tabelaId}:`, todasFaixas)
            
            // Retornar produto sem pre√ßo para esta faixa
            return {
              id: produto.id,
              nome: produto.nome,
              operadora: produto.operadora || "N√£o especificada",
              cobertura: produto.tipo || "Plano de Sa√∫de",
              tipo: produto.tipo || "Individual",
              descricao: produto.descricao || "Plano de sa√∫de com cobertura completa",
              preco: 0,
              precos: [],
              semPreco: true,
              mensagem: `Pre√ßo n√£o dispon√≠vel para faixa ${faixaEtaria}`
            }
          }
        } catch (error) {
          console.error(`‚ùå Erro ao processar produto ${produto.nome}:`, error)
          // Retornar produto com erro
          return {
            id: produto.id,
            nome: produto.nome,
            operadora: produto.operadora || "N√£o especificada",
            cobertura: produto.tipo || "Plano de Sa√∫de",
            tipo: produto.tipo || "Individual",
            descricao: produto.descricao || "Plano de sa√∫de com cobertura completa",
            preco: 0,
            precos: [],
            semPreco: true,
            mensagem: "Erro ao calcular pre√ßo"
          }
        }
      })
    )

    // Agrupar produtos por operadora
    const produtosPorOperadora = produtosComPrecos.reduce((acc: Record<string, any[]>, produto) => {
      const operadora = produto.operadora
      if (!acc[operadora]) {
        acc[operadora] = []
      }
      acc[operadora].push(produto)
      return acc
    }, {})

    console.log(`‚úÖ Retornando ${produtosComPrecos.length} produtos organizados por operadora`)
    return produtosPorOperadora
  } catch (error) {
    console.error("‚ùå Erro ao buscar produtos por faixa et√°ria:", error)
    throw error
  }
}
